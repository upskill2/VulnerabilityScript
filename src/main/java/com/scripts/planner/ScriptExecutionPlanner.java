package com.scripts.planner;

import com.scripts.model.VulnerabilityScript;

import java.util.*;

public class ScriptExecutionPlanner {

    public List<Integer> getExecutionOrder (List<VulnerabilityScript> scripts) {
        // Map to store the graph: K=scriptId, V=List of dependencies
        Map<Integer, List<Integer>> graph = new HashMap<> ();
        // Map to track dependencies count per script: K=scriptId, V=dependencies count
        Map<Integer, Integer> dependenciesCount = new HashMap<> ();

        // Initialize the graph and dependenciesCount map
        for (VulnerabilityScript script : scripts) {
            graph.putIfAbsent (script.getScriptId (), new ArrayList<> ());
            dependenciesCount.putIfAbsent (script.getScriptId (), 0);
        }

        // Build the graph and update dependenciesCount map
        for (VulnerabilityScript script : scripts) {
            for (int dependency : script.getDependencies ()) {
                graph.get (dependency).add (script.getScriptId ());
                dependenciesCount.put (script.getScriptId (), dependenciesCount.getOrDefault (script.getScriptId (), 0) + 1);
            }
        }

        // Queue for scripts with no dependencies
        Queue<Integer> queue = new LinkedList<> ();
        for (Map.Entry<Integer, Integer> entry : dependenciesCount.entrySet ()) {
            if (entry.getValue () == 0) {
                queue.add (entry.getKey ());
            }
        }

        // List to store the execution order result
        List<Integer> executionOrder = new ArrayList<> ();

        // Add to queue scripts with no dependencies
        while (!queue.isEmpty ()) {
            int current = queue.poll ();
            executionOrder.add (current);

            final List<Integer> dependentScripts = graph.get (current);
            for (int neighbor : dependentScripts) {
                dependenciesCount.put (neighbor, dependenciesCount.get (neighbor) - 1);
                if (dependenciesCount.get (neighbor) == 0) {
                    queue.add (neighbor);
                }
            }
        }

        // Check if there was a cycle
        if (executionOrder.size () != scripts.size ()) {
            throw new IllegalStateException ("There exists a cycle in the scripts dependencies");
        }

        return executionOrder;
    }

}