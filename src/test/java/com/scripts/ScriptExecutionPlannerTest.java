package com.scripts;

import com.scripts.model.VulnerabilityScript;
import com.scripts.planner.ScriptExecutionPlanner;
import org.junit.jupiter.api.Test;

import java.util.Collections;
import java.util.List;

import static org.junit.jupiter.api.Assertions.*;

class ScriptExecutionPlannerTest {

    @Test
    void executionOrder_WithNoDependencies () {
        List<VulnerabilityScript> scripts = List.of (
                new VulnerabilityScript (1, Collections.emptyList ()),
                new VulnerabilityScript (2, Collections.emptyList ()),
                new VulnerabilityScript (3, Collections.emptyList ())
        );

        ScriptExecutionPlanner planner = new ScriptExecutionPlanner ();
        List<Integer> executionOrder = planner.getExecutionOrder (scripts);
        assertEquals (List.of (1, 2, 3), executionOrder);
    }

    @Test
    void executionOrder_WithSingleDependencyChain () {
        List<VulnerabilityScript> scripts = List.of (
                new VulnerabilityScript (1, List.of (2)),
                new VulnerabilityScript (2, List.of (3)),
                new VulnerabilityScript (3, Collections.emptyList ())
        );

        ScriptExecutionPlanner planner = new ScriptExecutionPlanner ();
        List<Integer> executionOrder = planner.getExecutionOrder (scripts);
        assertEquals (List.of (3, 2, 1), executionOrder);
    }

    @Test
    void executionOrder_WithMultipleDependencies () {
        List<VulnerabilityScript> scripts = List.of (
                new VulnerabilityScript (5, List.of (1, 2)),
                new VulnerabilityScript (1, List.of (2, 3, 4)),
                new VulnerabilityScript (4, Collections.emptyList ()),
                new VulnerabilityScript (2, List.of (4)),
                new VulnerabilityScript (3, List.of (2))
        );

        ScriptExecutionPlanner planner = new ScriptExecutionPlanner ();
        List<Integer> executionOrder = planner.getExecutionOrder (scripts);
        assertEquals (List.of (4, 2, 3, 1, 5), executionOrder);
    }

    @Test
    void executionOrder_WithNoScripts () {
        List<VulnerabilityScript> scripts = Collections.emptyList ();

        ScriptExecutionPlanner planner = new ScriptExecutionPlanner ();
        List<Integer> executionOrder = planner.getExecutionOrder (scripts);
        assertTrue (executionOrder.isEmpty ());
    }

    @Test
    void executionOrder_WithSelfDependency () {
        List<VulnerabilityScript> scripts = List.of (
                new VulnerabilityScript (1, List.of (1))
        );

        ScriptExecutionPlanner planner = new ScriptExecutionPlanner ();
        Exception exception = assertThrows (IllegalStateException.class, () -> {
            planner.getExecutionOrder (scripts);
        });
        assertEquals ("There exists a cycle in the scripts dependencies", exception.getMessage ());
    }

}